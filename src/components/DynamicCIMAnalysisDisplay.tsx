
import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { supabase } from "@/lib/supabase";
import { toast } from "sonner";
import { 
  Award,
  Download,
  RefreshCw,
  Share2,
  Clock,
  AlertTriangle,
  Lightbulb,
  Database
} from "lucide-react";
import { DynamicDataScanner, DataSection } from './DynamicDataScanner';
import { DynamicSectionRenderer } from './DynamicRenderers';
import { FieldMetadataService } from '@/services/fieldMetadataService';

interface CIMAnalysis {
  id: string;
  deal_id: string;
  document_id: string;
  investment_grade: string;
  executive_summary: string;
  business_model: any;
  financial_metrics: any;
  key_risks: any[];
  investment_highlights: string[];
  management_questions: string[];
  competitive_position: any;
  recommendation: any;
  created_at: string;
  updated_at: string;
}

interface DynamicCIMAnalysisDisplayProps {
  dealId: string;
}

export function DynamicCIMAnalysisDisplay({ dealId }: DynamicCIMAnalysisDisplayProps) {
  const [analysis, setAnalysis] = useState<CIMAnalysis | null>(null);
  const [loading, setLoading] = useState(true);
  const [sections, setSections] = useState<DataSection[]>([]);
  const [unknownFields, setUnknownFields] = useState<string[]>([]);

  useEffect(() => {
    fetchCIMAnalysis();
  }, [dealId]);

  const fetchCIMAnalysis = async () => {
    try {
      const { data, error } = await supabase
        .from('cim_analysis')
        .select('*')
        .eq('deal_id', dealId)
        .order('created_at', { ascending: false })
        .limit(1);

      if (error) throw error;
      
      if (data && data.length > 0) {
        const analysisData = data[0];
        setAnalysis(analysisData);
        
        // Scan and organize the data dynamically
        const allFields = DynamicDataScanner.scanData(analysisData);
        console.log('Scanned fields:', allFields);
        
        const organizedSections = DynamicDataScanner.groupIntoSections(allFields);
        setSections(organizedSections);
        
        // Track unknown fields for learning
        const unknown = allFields
          .filter(field => field.confidence < 0.7)
          .map(field => field.name);
        setUnknownFields(unknown);
        
        if (unknown.length > 0) {
          console.log('Unknown fields detected:', unknown);
        }
      }
    } catch (error) {
      console.error("Error fetching CIM analysis:", error);
      toast.error("Failed to load CIM analysis");
    } finally {
      setLoading(false);
    }
  };

  const handleFieldEdit = async (field: any, newLabel: string) => {
    try {
      // Save the new label to our metadata service
      await FieldMetadataService.saveFieldMetadata(field.name, newLabel, field.category);
      
      // Update the local display
      setSections(prevSections => 
        prevSections.map(section => ({
          ...section,
          fields: section.fields.map(f => 
            f.path === field.path ? { ...f, suggestedLabel: newLabel } : f
          )
        }))
      );
      
      toast.success('Field label updated successfully!');
    } catch (error) {
      console.error('Error updating field label:', error);
      toast.error('Failed to update field label');
    }
  };

  const getGradeBadgeColor = (grade: string) => {
    const gradeUpper = grade.toUpperCase();
    if (gradeUpper.startsWith('A')) return "bg-green-500 text-white";
    if (gradeUpper.startsWith('B')) return "bg-yellow-500 text-white";
    return "bg-red-500 text-white";
  };

  const handleExportAnalysis = () => {
    if (!analysis) return;
    
    const analysisData = {
      dealId,
      exportDate: new Date().toISOString(),
      analysis,
      metadata: {
        sectionsFound: sections.length,
        totalFields: sections.reduce((sum, s) => sum + s.fields.length, 0),
        unknownFields: unknownFields.length
      }
    };
    
    const blob = new Blob([JSON.stringify(analysisData, null, 2)], {
      type: 'application/json'
    });
    
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `dynamic-cim-analysis-${dealId}.json`;
    a.click();
    URL.revokeObjectURL(url);
    
    toast.success('Analysis exported successfully!');
  };

  const handleShareAnalysis = () => {
    if (!analysis || sections.length === 0) return;
    
    const summary = `CIM Analysis Summary (Dynamic Scan)
Investment Grade: ${analysis.investment_grade}
Data Sections Found: ${sections.length}
Total Fields Analyzed: ${sections.reduce((sum, s) => sum + s.fields.length, 0)}

Key Sections:
${sections.slice(0, 4).map(s => `â€¢ ${s.title} (${s.fields.length} fields)`).join('\n')}

Generated by DealMate AI - Dynamic Analysis System`;
    
    navigator.clipboard.writeText(summary).then(() => {
      toast.success('Analysis summary copied to clipboard!');
    });
  };

  if (loading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-center">
            <div className="h-8 w-8 rounded-full border-4 border-primary border-t-transparent animate-spin"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!analysis) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="text-center py-8">
            <Award className="h-16 w-16 mx-auto text-muted-foreground mb-4" />
            <h3 className="text-lg font-medium mb-2">No CIM Analysis Available</h3>
            <p className="text-muted-foreground">Upload and process a CIM document to see investment analysis here.</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header Section with Investment Grade */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-3xl font-bold text-gray-900 mb-3">Dynamic Investment Analysis</h2>
          <div className="flex items-center gap-3">
            <Badge className={`text-lg px-4 py-2 ${getGradeBadgeColor(analysis.investment_grade)}`}>
              Grade: {analysis.investment_grade}
            </Badge>
            <Badge variant="outline" className="text-sm">
              <Database className="w-4 h-4 mr-1" />
              {sections.length} sections found
            </Badge>
            {unknownFields.length > 0 && (
              <Badge variant="outline" className="text-sm bg-yellow-50 text-yellow-700">
                <AlertTriangle className="w-4 h-4 mr-1" />
                {unknownFields.length} new fields
              </Badge>
            )}
          </div>
        </div>
        
        <div className="flex gap-2">
          <Button variant="outline" size="sm" onClick={handleShareAnalysis}>
            <Share2 className="w-4 h-4 mr-1" />
            Share
          </Button>
          <Button variant="outline" size="sm" onClick={handleExportAnalysis}>
            <Download className="w-4 h-4 mr-1" />
            Export
          </Button>
          <Button variant="outline" size="sm" onClick={fetchCIMAnalysis}>
            <RefreshCw className="w-4 h-4 mr-1" />
            Refresh
          </Button>
        </div>
      </div>

      <Separator />

      {/* Unknown Fields Alert */}
      {unknownFields.length > 0 && (
        <Card className="border-yellow-200 bg-yellow-50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-yellow-800">
              <Lightbulb className="w-5 h-5" />
              New Fields Detected
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-yellow-700 mb-2">
              Found {unknownFields.length} new field patterns that could benefit from better labeling:
            </p>
            <div className="flex flex-wrap gap-2">
              {unknownFields.map(field => (
                <Badge key={field} variant="outline" className="bg-white">
                  {field}
                </Badge>
              ))}
            </div>
            <p className="text-sm text-yellow-600 mt-2">
              Click the edit icons next to field labels to improve the display for future analyses.
            </p>
          </CardContent>
        </Card>
      )}

      {/* Dynamic Sections */}
      {sections.map((section) => (
        <DynamicSectionRenderer
          key={section.category}
          section={section}
          onFieldEdit={handleFieldEdit}
        />
      ))}

      {/* Analysis Metadata */}
      <div className="text-center text-sm text-gray-500 mt-6 p-4 bg-gray-50 rounded-lg">
        <div className="flex items-center justify-center gap-4">
          <div className="flex items-center gap-1">
            <Clock className="w-4 h-4" />
            <span>Created: {new Date(analysis.created_at).toLocaleDateString()}</span>
          </div>
          <div className="flex items-center gap-1">
            <Award className="w-4 h-4" />
            <span>Investment Grade: {analysis.investment_grade}</span>
          </div>
          <div className="flex items-center gap-1">
            <Database className="w-4 h-4" />
            <span>Dynamic Analysis: {sections.reduce((sum, s) => sum + s.fields.length, 0)} fields processed</span>
          </div>
        </div>
      </div>
    </div>
  );
}
